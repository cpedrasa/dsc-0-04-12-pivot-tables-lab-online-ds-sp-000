<<<<<<< HEAD
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Pivot Tables with Pandas - Lab\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this lab, we'll learn how to make use of our newfound knowledge of pivot tables to work with real-world data.  We'll start by exploring \n",
    "\n",
    "## Objectives\n",
    "\n",
    "You will be able to:\n",
    "\n",
    "* Understand and explain what a multi-level hierarchical index is\n",
    "* Understand, explain the difference and use df.pivot and pd.pivot_table\n",
    "* Switch between “long” and “wide” in a DataFrame using stack() and unstack()\n",
    "* Transform “wide” to “long” DataFrames using `melt`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting Started\n",
    "\n",
    "### Import Pandas and Matplotlib.pyplot Using Standard Aliases\n",
    "\n",
    "In the cell below:\n",
    "\n",
    "* Import `pandas` and set the standard alias\n",
    "* Import `matplotlib.pyplot` and set the standard alias\n",
    "* Run the ipython magic command to display matplotlib graphs inline within the notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the Data\n",
    "The data for this activity is stored in a file called `'causes_of_death.tsv'` which is a somewhat morbid dataset from the center for disease control. Note that the file extension .tsv indicates that this data is formatted slightly differently then the standard .csv, the difference being that it has 'tab seperated values' instead of 'comma seperated values'. As such, pass in the optional parameter `delimiter='\\t'` into the `pd.read_csv()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df = pd.read_csv('causes_of_death.tsv',sep='\\t')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, display the head of the DataFrame to ensure everything loaded correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Notes</th>\n",
       "      <th>State</th>\n",
       "      <th>State Code</th>\n",
       "      <th>Ten-Year Age Groups</th>\n",
       "      <th>Ten-Year Age Groups Code</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Gender Code</th>\n",
       "      <th>Race</th>\n",
       "      <th>Race Code</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Population</th>\n",
       "      <th>Crude Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>F</td>\n",
       "      <td>American Indian or Alaska Native</td>\n",
       "      <td>1002-5</td>\n",
       "      <td>14</td>\n",
       "      <td>3579</td>\n",
       "      <td>Unreliable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>F</td>\n",
       "      <td>Asian or Pacific Islander</td>\n",
       "      <td>A-PI</td>\n",
       "      <td>24</td>\n",
       "      <td>7443</td>\n",
       "      <td>322.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>F</td>\n",
       "      <td>Black or African American</td>\n",
       "      <td>2054-5</td>\n",
       "      <td>2093</td>\n",
       "      <td>169339</td>\n",
       "      <td>1236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>F</td>\n",
       "      <td>White</td>\n",
       "      <td>2106-3</td>\n",
       "      <td>2144</td>\n",
       "      <td>347921</td>\n",
       "      <td>616.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>M</td>\n",
       "      <td>Asian or Pacific Islander</td>\n",
       "      <td>A-PI</td>\n",
       "      <td>33</td>\n",
       "      <td>7366</td>\n",
       "      <td>448.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Notes    State  State Code Ten-Year Age Groups Ten-Year Age Groups Code  \\\n",
       "0    NaN  Alabama           1            < 1 year                        1   \n",
       "1    NaN  Alabama           1            < 1 year                        1   \n",
       "2    NaN  Alabama           1            < 1 year                        1   \n",
       "3    NaN  Alabama           1            < 1 year                        1   \n",
       "4    NaN  Alabama           1            < 1 year                        1   \n",
       "\n",
       "   Gender Gender Code                              Race Race Code  Deaths  \\\n",
       "0  Female           F  American Indian or Alaska Native    1002-5      14   \n",
       "1  Female           F         Asian or Pacific Islander      A-PI      24   \n",
       "2  Female           F         Black or African American    2054-5    2093   \n",
       "3  Female           F                             White    2106-3    2144   \n",
       "4    Male           M         Asian or Pacific Islander      A-PI      33   \n",
       "\n",
       "  Population  Crude Rate  \n",
       "0       3579  Unreliable  \n",
       "1       7443       322.5  \n",
       "2     169339      1236.0  \n",
       "3     347921       616.2  \n",
       "4       7366       448.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our data is currently in **_Wide_** format.  We can tidy this up by converting it to **_Long_** format by using groupby statements to aggregate our data into a much neater, more readable format. \n",
    "\n",
    "# Groupby Aggregations\n",
    "\n",
    "Complete the following groupby statements."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) Groupby State and Gender. Sum the values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Notes</th>\n",
       "      <th>State Code</th>\n",
       "      <th>Deaths</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Alabama</th>\n",
       "      <th>Female</th>\n",
       "      <td>0.0</td>\n",
       "      <td>40</td>\n",
       "      <td>430133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>0.0</td>\n",
       "      <td>41</td>\n",
       "      <td>430647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Alaska</th>\n",
       "      <th>Female</th>\n",
       "      <td>0.0</td>\n",
       "      <td>80</td>\n",
       "      <td>27199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>0.0</td>\n",
       "      <td>84</td>\n",
       "      <td>36135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <th>Female</th>\n",
       "      <td>0.0</td>\n",
       "      <td>180</td>\n",
       "      <td>396028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Notes  State Code  Deaths\n",
       "State   Gender                           \n",
       "Alabama Female    0.0          40  430133\n",
       "        Male      0.0          41  430647\n",
       "Alaska  Female    0.0          80   27199\n",
       "        Male      0.0          84   36135\n",
       "Arizona Female    0.0         180  396028"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your code here\n",
    "df.groupby(['State','Gender']).sum().head()\n",
    "\n",
    "#<pandas.core.groupby.groupby.DataFrameGroupBy object at 0x11a157080>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) Groupby State and Gender and Race. Find the average values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Notes</th>\n",
       "      <th>State Code</th>\n",
       "      <th>Deaths</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Race</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Alabama</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Female</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian or Pacific Islander</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>95.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black or African American</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9074.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29890.636364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>86.375000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Notes  State Code  \\\n",
       "State   Gender Race                                                  \n",
       "Alabama Female American Indian or Alaska Native    NaN         1.0   \n",
       "               Asian or Pacific Islander           NaN         1.0   \n",
       "               Black or African American           NaN         1.0   \n",
       "               White                               NaN         1.0   \n",
       "        Male   American Indian or Alaska Native    NaN         1.0   \n",
       "\n",
       "                                                       Deaths  \n",
       "State   Gender Race                                            \n",
       "Alabama Female American Indian or Alaska Native     70.875000  \n",
       "               Asian or Pacific Islander            95.500000  \n",
       "               Black or African American          9074.000000  \n",
       "               White                             29890.636364  \n",
       "        Male   American Indian or Alaska Native     86.375000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your code here\n",
    "df.groupby(['State','Gender','Race']).mean().head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) Groupby Gender and Race. Find the minimum values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Notes</th>\n",
       "      <th>State</th>\n",
       "      <th>State Code</th>\n",
       "      <th>Ten-Year Age Groups</th>\n",
       "      <th>Ten-Year Age Groups Code</th>\n",
       "      <th>Gender Code</th>\n",
       "      <th>Race Code</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Population</th>\n",
       "      <th>Crude Rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th>Race</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Female</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>1-4 years</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>1002-5</td>\n",
       "      <td>10</td>\n",
       "      <td>100285</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Asian or Pacific Islander</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>1-4 years</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>A-PI</td>\n",
       "      <td>10</td>\n",
       "      <td>100371</td>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Black or African American</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>1-4 years</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>2054-5</td>\n",
       "      <td>10</td>\n",
       "      <td>100170</td>\n",
       "      <td>100.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>White</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>1-4 years</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>2106-3</td>\n",
       "      <td>12</td>\n",
       "      <td>1000704</td>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <th>American Indian or Alaska Native</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>1</td>\n",
       "      <td>1-4 years</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>1002-5</td>\n",
       "      <td>10</td>\n",
       "      <td>1001</td>\n",
       "      <td>10000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Notes    State  State Code  \\\n",
       "Gender Race                                                           \n",
       "Female American Indian or Alaska Native    NaN  Alabama           1   \n",
       "       Asian or Pacific Islander           NaN  Alabama           1   \n",
       "       Black or African American           NaN  Alabama           1   \n",
       "       White                               NaN  Alabama           1   \n",
       "Male   American Indian or Alaska Native    NaN  Alabama           1   \n",
       "\n",
       "                                        Ten-Year Age Groups  \\\n",
       "Gender Race                                                   \n",
       "Female American Indian or Alaska Native           1-4 years   \n",
       "       Asian or Pacific Islander                  1-4 years   \n",
       "       Black or African American                  1-4 years   \n",
       "       White                                      1-4 years   \n",
       "Male   American Indian or Alaska Native           1-4 years   \n",
       "\n",
       "                                        Ten-Year Age Groups Code Gender Code  \\\n",
       "Gender Race                                                                    \n",
       "Female American Indian or Alaska Native                        1           F   \n",
       "       Asian or Pacific Islander                               1           F   \n",
       "       Black or African American                               1           F   \n",
       "       White                                                   1           F   \n",
       "Male   American Indian or Alaska Native                        1           M   \n",
       "\n",
       "                                        Race Code  Deaths Population  \\\n",
       "Gender Race                                                            \n",
       "Female American Indian or Alaska Native    1002-5      10     100285   \n",
       "       Asian or Pacific Islander             A-PI      10     100371   \n",
       "       Black or African American           2054-5      10     100170   \n",
       "       White                               2106-3      12    1000704   \n",
       "Male   American Indian or Alaska Native    1002-5      10       1001   \n",
       "\n",
       "                                        Crude Rate  \n",
       "Gender Race                                         \n",
       "Female American Indian or Alaska Native       10.4  \n",
       "       Asian or Pacific Islander              10.1  \n",
       "       Black or African American             100.3  \n",
       "       White                                  10.1  \n",
       "Male   American Indian or Alaska Native    10000.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your code here\n",
    "df.groupby(['Gender','Race']).min().head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4) Create a bar chart of the total number of deaths by state.\n",
    "* Sort your columns in order (ascending or descending are both acceptable).  \n",
    "* Also make sure to include a title, axes labels and have your graph be an appropriate size.\n",
    "\n",
    "**_NOTE:_** In order to do this, slice the `Deaths` column after the `.groupby()` method, but before the `sum()` method.  You can even chain the `.plot()` call on after the `sum()` call and do this all on one line, excluding the labeling of the graph!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Deaths')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Your code here\n",
    "df.groupby(['State'])['Deaths'].sum().plot(kind='barh',title='Total Deaths by State', figsize=(15,8))\n",
    "plt.xlabel('Number of Deaths')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspecting our Data\n",
    "\n",
    "Let's go one step further and get a print-out of the data type of each column. \n",
    "\n",
    "In the cell below, get the `.info()` of our DataFrame, and note the data type that each column is currently stored as.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4115 entries, 0 to 4114\n",
      "Data columns (total 12 columns):\n",
      "Notes                       0 non-null float64\n",
      "State                       4115 non-null object\n",
      "State Code                  4115 non-null int64\n",
      "Ten-Year Age Groups         4115 non-null object\n",
      "Ten-Year Age Groups Code    4115 non-null object\n",
      "Gender                      4115 non-null object\n",
      "Gender Code                 4115 non-null object\n",
      "Race                        4115 non-null object\n",
      "Race Code                   4115 non-null object\n",
      "Deaths                      4115 non-null int64\n",
      "Population                  4115 non-null object\n",
      "Crude Rate                  4115 non-null object\n",
      "dtypes: float64(1), int64(2), object(9)\n",
      "memory usage: 385.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at some samples from the Population column to see if the current encoding seems appropriate for the data it contains. \n",
    "\n",
    "In the cell below, display the population values for the first 5 rows in the DataFrame.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      3579\n",
       "1      7443\n",
       "2    169339\n",
       "3    347921\n",
       "4      7366\n",
       "Name: Population, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Population.iloc[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Just to be extra sure, let's check the value counts to see how many times each unqiue value shows up in the dataset. We'll only look at the top 5. \n",
    "\n",
    "In the cell below, print out the top 5 `value_counts()` of the population column of the DataFrame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Not Applicable    75\n",
       "113598             2\n",
       "9192               2\n",
       "36460              2\n",
       "907                2\n",
       "Name: Population, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Population.value_counts()[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, this data should be stored as a numeric type, not a categorical type.  \n",
    "\n",
    "### 5a) Reformat the Population Column as an Integer\n",
    "As stands, not all values will be able to be reformated as integers. Most of the cells in the the `Population` column contain integer values, but the entire column is currently encoded in string format because some cells contain the string `\"Not Applicable\"`.\n",
    "\n",
    "We need to remove these rows before we can cast the Population column to an Integer data type. \n",
    "\n",
    "In the cell below:\n",
    "\n",
    "* Slice the rows of `df` where the Population column is equal to `'Not Applicable'`.\n",
    "* Use `to_drop.index`  to drop the offending rows from `df`. Be sure to set the `axis=0`, and `inplace=True`\n",
    "* Cast the Population column to an integer data type using the `.astype()` function, with the single parameter `int64` passed in. \n",
    "* Print the Population column's `dtype` attribute to confirm it is now stored in `int64` format. \n",
    "\n",
    "**_NOTE:_** `.astype()` returns a copy of the column, so make sure you set the Population column equal to what this method returns--don't just call it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int64\n"
     ]
    }
   ],
   "source": [
    "#Your code here\n",
    "to_drop = df[df['Population'] == 'Not Applicable']\n",
    "df.drop(to_drop.index, axis=0, inplace=True)\n",
    "df.Population = df.Population.astype('int64')\n",
    "print(df.Population.dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5b) Complete the Bar Chart\n",
    "\n",
    "Now that we've reformatted our data, let's create a bar chart of the of the Mean Population by State."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Mean Population')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Your code here\n",
    "df.groupby(['State'])['Population'].mean().plot(kind='barh',title='Mean Population by State', figsize=(15,8))\n",
    "plt.xlabel('Mean Population')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we will investigate how we can combine the **pivot** method along with the **groupby** method to combine some cool **stacked bar charts**!\n",
    "\n",
    "### Using Aggregate Functions\n",
    "\n",
    "In the cell below:\n",
    "\n",
    "* Group `df` by `'State'` and  `'Gender'`, and then slice both `'Death'` and `'Population'` from it. Chain the `.agg()` method to return the mean, min, max, and standard deviation these sliced columns. \n",
    "\n",
    "**_NOTE:_** This only requires one line of code.  \n",
    "\n",
    "By now, you've probably caught on that the code required to do this follows this pattern:    `([things to group by])[columns to slice].agg([aggregates to return])`\n",
    "\n",
    "Then, display the head of this of this new DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">Deaths</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Population</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Alabama</th>\n",
       "      <th>Female</th>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10</td>\n",
       "      <td>116297</td>\n",
       "      <td>24612.250487</td>\n",
       "      <td>1.078713e+06</td>\n",
       "      <td>2087</td>\n",
       "      <td>4334752</td>\n",
       "      <td>1.400309e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>10765.850000</td>\n",
       "      <td>10</td>\n",
       "      <td>88930</td>\n",
       "      <td>20813.538537</td>\n",
       "      <td>1.014946e+06</td>\n",
       "      <td>1129</td>\n",
       "      <td>4284775</td>\n",
       "      <td>1.397830e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Alaska</th>\n",
       "      <th>Female</th>\n",
       "      <td>679.975000</td>\n",
       "      <td>13</td>\n",
       "      <td>4727</td>\n",
       "      <td>1154.870455</td>\n",
       "      <td>1.440403e+05</td>\n",
       "      <td>1224</td>\n",
       "      <td>682855</td>\n",
       "      <td>2.015793e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>860.357143</td>\n",
       "      <td>12</td>\n",
       "      <td>5185</td>\n",
       "      <td>1411.777392</td>\n",
       "      <td>1.518884e+05</td>\n",
       "      <td>578</td>\n",
       "      <td>770502</td>\n",
       "      <td>2.238843e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <th>Female</th>\n",
       "      <td>8998.386364</td>\n",
       "      <td>21</td>\n",
       "      <td>133923</td>\n",
       "      <td>26245.941003</td>\n",
       "      <td>1.246502e+06</td>\n",
       "      <td>12211</td>\n",
       "      <td>6265346</td>\n",
       "      <td>2.096632e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Deaths                              Population         \\\n",
       "                        mean min     max           std          mean    min   \n",
       "State   Gender                                                                \n",
       "Alabama Female  10753.325000  10  116297  24612.250487  1.078713e+06   2087   \n",
       "        Male    10765.850000  10   88930  20813.538537  1.014946e+06   1129   \n",
       "Alaska  Female    679.975000  13    4727   1154.870455  1.440403e+05   1224   \n",
       "        Male      860.357143  12    5185   1411.777392  1.518884e+05    578   \n",
       "Arizona Female   8998.386364  21  133923  26245.941003  1.246502e+06  12211   \n",
       "\n",
       "                                       \n",
       "                    max           std  \n",
       "State   Gender                         \n",
       "Alabama Female  4334752  1.400309e+06  \n",
       "        Male    4284775  1.397830e+06  \n",
       "Alaska  Female   682855  2.015793e+05  \n",
       "        Male     770502  2.238843e+05  \n",
       "Arizona Female  6265346  2.096632e+06  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A sample groupby similar to above. \n",
    "grouped = df.groupby(['State', 'Gender'])['Deaths','Population'].agg(['mean','min', 'max', 'std'])\n",
    "grouped.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note how Pandas denotes a multi-hierarchical index in the DataFrame above.  \n",
    "\n",
    "Let's inspect how a multi-hierarchical index is actually stored.  \n",
    "\n",
    "In the cell below, display the `index` attribute of this DataFrame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex(levels=[['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'], ['Female', 'Male']],\n",
       "           labels=[[0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]],\n",
       "           names=['State', 'Gender'])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A two-dimensional array denotes the multiple levels, with each possible combination being a row in our `grouped` DataFrame.  \n",
    "\n",
    "Let's reset the index, and then see how it changes. \n",
    "\n",
    "In the cell below, call the DataFrame's `reset_index()` function.  Then, display the head of the DataFrame.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Deaths</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Population</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Female</td>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10</td>\n",
       "      <td>116297</td>\n",
       "      <td>24612.250487</td>\n",
       "      <td>1.078713e+06</td>\n",
       "      <td>2087</td>\n",
       "      <td>4334752</td>\n",
       "      <td>1.400309e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Male</td>\n",
       "      <td>10765.850000</td>\n",
       "      <td>10</td>\n",
       "      <td>88930</td>\n",
       "      <td>20813.538537</td>\n",
       "      <td>1.014946e+06</td>\n",
       "      <td>1129</td>\n",
       "      <td>4284775</td>\n",
       "      <td>1.397830e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Female</td>\n",
       "      <td>679.975000</td>\n",
       "      <td>13</td>\n",
       "      <td>4727</td>\n",
       "      <td>1154.870455</td>\n",
       "      <td>1.440403e+05</td>\n",
       "      <td>1224</td>\n",
       "      <td>682855</td>\n",
       "      <td>2.015793e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Male</td>\n",
       "      <td>860.357143</td>\n",
       "      <td>12</td>\n",
       "      <td>5185</td>\n",
       "      <td>1411.777392</td>\n",
       "      <td>1.518884e+05</td>\n",
       "      <td>578</td>\n",
       "      <td>770502</td>\n",
       "      <td>2.238843e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Female</td>\n",
       "      <td>8998.386364</td>\n",
       "      <td>21</td>\n",
       "      <td>133923</td>\n",
       "      <td>26245.941003</td>\n",
       "      <td>1.246502e+06</td>\n",
       "      <td>12211</td>\n",
       "      <td>6265346</td>\n",
       "      <td>2.096632e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State  Gender        Deaths                              Population  \\\n",
       "                            mean min     max           std          mean   \n",
       "0  Alabama  Female  10753.325000  10  116297  24612.250487  1.078713e+06   \n",
       "1  Alabama    Male  10765.850000  10   88930  20813.538537  1.014946e+06   \n",
       "2   Alaska  Female    679.975000  13    4727   1154.870455  1.440403e+05   \n",
       "3   Alaska    Male    860.357143  12    5185   1411.777392  1.518884e+05   \n",
       "4  Arizona  Female   8998.386364  21  133923  26245.941003  1.246502e+06   \n",
       "\n",
       "                                 \n",
       "     min      max           std  \n",
       "0   2087  4334752  1.400309e+06  \n",
       "1   1129  4284775  1.397830e+06  \n",
       "2   1224   682855  2.015793e+05  \n",
       "3    578   770502  2.238843e+05  \n",
       "4  12211  6265346  2.096632e+06  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First, reset the index. Notice the subtle difference; State and Gender are now columns rather then the index.\n",
    "grouped = grouped.reset_index()\n",
    "grouped.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note how the way the index is displayed has changed.  The index columns that made up the multi-hierarchical index before are now stored as columns of data, with each row given a more traditional numerical index. \n",
    "\n",
    "Let's confirm this by reexamining the `index` attribute of `grouped` in the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=102, step=1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.index"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, look again at the displayed DataFrame--specifically, the columns.  Resetting the index has caused the DataFrame to use a mutlti-indexed structure for the columns. \n",
    "\n",
    "In the cell below, examine the `columns` attribute of `grouped` to confirm this. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex(levels=[['Deaths', 'Population', 'Gender', 'State'], ['mean', 'min', 'max', 'std', '']],\n",
       "           labels=[[3, 2, 0, 0, 0, 0, 1, 1, 1, 1], [4, 4, 0, 1, 2, 3, 0, 1, 2, 3]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Notice that this causes columns to be MultiIndexed!\n",
    "grouped.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Column Levels\n",
    "\n",
    "Since we're working with miulti-hierarchical indices, we can examine the indices available at each level.\n",
    "\n",
    "In the cell below, use the `get_level_values` method contained within the DataFrame's `columns` object to get the values for the outermost layer of the index. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['State', 'Gender', 'Deaths', 'Deaths', 'Deaths', 'Deaths', 'Population',\n",
       "       'Population', 'Population', 'Population'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.columns.get_level_values(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, get the level values for the inner layer of the index. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['', '', 'mean', 'min', 'max', 'std', 'mean', 'min', 'max', 'std'], dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.columns.get_level_values(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flattening the DataFrame\n",
    "\n",
    "We can also **_flatten_** the DataFrame from a multi-hierarchical index to more traditional one-dimensional index.  We do this by creating each unique combination possible of every level of the multi-hierarchical index.  Since this is a complex task, you do not need to write it--but take some time to examine the code in the cell below and see if you can understand how it works! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['State', 'Gender', 'Deaths_mean', 'Deaths_min', 'Deaths_max',\n",
       "       'Deaths_std', 'Population_mean', 'Population_min', 'Population_max',\n",
       "       'Population_std'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We could also flatten these:\n",
    "cols0 = grouped.columns.get_level_values(0)\n",
    "cols1 = grouped.columns.get_level_values(1)\n",
    "grouped.columns = [col0 + '_' + col1 if col1 != '' else col0 for col0, col1 in list(zip(cols0, cols1))]\n",
    "#The list comprehension above is more complicated then what we need but creates a nicer formatting and\n",
    "#demonstrates using a conditional within a list comprehension.\n",
    "#This simpler version works but has some tail underscores where col1 is blank:\n",
    "#grouped.columns = [col0 + '_' + col1 for col0, col1 in list(zip(cols0, cols1))]\n",
    "grouped.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've flattened the DataFrame, let's inspect a couple rows to see what it looks like. \n",
    "\n",
    "In the cell below, inspect the head of the `grouped` DataFrame. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Deaths_mean</th>\n",
       "      <th>Deaths_min</th>\n",
       "      <th>Deaths_max</th>\n",
       "      <th>Deaths_std</th>\n",
       "      <th>Population_mean</th>\n",
       "      <th>Population_min</th>\n",
       "      <th>Population_max</th>\n",
       "      <th>Population_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Female</td>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10</td>\n",
       "      <td>116297</td>\n",
       "      <td>24612.250487</td>\n",
       "      <td>1.078713e+06</td>\n",
       "      <td>2087</td>\n",
       "      <td>4334752</td>\n",
       "      <td>1.400309e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Male</td>\n",
       "      <td>10765.850000</td>\n",
       "      <td>10</td>\n",
       "      <td>88930</td>\n",
       "      <td>20813.538537</td>\n",
       "      <td>1.014946e+06</td>\n",
       "      <td>1129</td>\n",
       "      <td>4284775</td>\n",
       "      <td>1.397830e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Female</td>\n",
       "      <td>679.975000</td>\n",
       "      <td>13</td>\n",
       "      <td>4727</td>\n",
       "      <td>1154.870455</td>\n",
       "      <td>1.440403e+05</td>\n",
       "      <td>1224</td>\n",
       "      <td>682855</td>\n",
       "      <td>2.015793e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Male</td>\n",
       "      <td>860.357143</td>\n",
       "      <td>12</td>\n",
       "      <td>5185</td>\n",
       "      <td>1411.777392</td>\n",
       "      <td>1.518884e+05</td>\n",
       "      <td>578</td>\n",
       "      <td>770502</td>\n",
       "      <td>2.238843e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Female</td>\n",
       "      <td>8998.386364</td>\n",
       "      <td>21</td>\n",
       "      <td>133923</td>\n",
       "      <td>26245.941003</td>\n",
       "      <td>1.246502e+06</td>\n",
       "      <td>12211</td>\n",
       "      <td>6265346</td>\n",
       "      <td>2.096632e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State  Gender   Deaths_mean  Deaths_min  Deaths_max    Deaths_std  \\\n",
       "0  Alabama  Female  10753.325000          10      116297  24612.250487   \n",
       "1  Alabama    Male  10765.850000          10       88930  20813.538537   \n",
       "2   Alaska  Female    679.975000          13        4727   1154.870455   \n",
       "3   Alaska    Male    860.357143          12        5185   1411.777392   \n",
       "4  Arizona  Female   8998.386364          21      133923  26245.941003   \n",
       "\n",
       "   Population_mean  Population_min  Population_max  Population_std  \n",
       "0     1.078713e+06            2087         4334752    1.400309e+06  \n",
       "1     1.014946e+06            1129         4284775    1.397830e+06  \n",
       "2     1.440403e+05            1224          682855    2.015793e+05  \n",
       "3     1.518884e+05             578          770502    2.238843e+05  \n",
       "4     1.246502e+06           12211         6265346    2.096632e+06  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Pivots\n",
    "\n",
    "Now, we'll gain some practice using the DataFrame class's built-in `.pivot()` method.  \n",
    "\n",
    "In the cell below, call the DataFrame's pivot method with the following parameters:\n",
    "\n",
    "* index = `'State'`\n",
    "* columns = `'Gender'`\n",
    "* values = `'Deaths_mean'`\n",
    "\n",
    "Then, display the head of our new `pivot` DataFrame to see what it looks like. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10765.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>679.975000</td>\n",
       "      <td>860.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arizona</th>\n",
       "      <td>8998.386364</td>\n",
       "      <td>10036.204545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arkansas</th>\n",
       "      <td>6621.615385</td>\n",
       "      <td>6301.690476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>California</th>\n",
       "      <td>48312.840909</td>\n",
       "      <td>49555.522727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender            Female          Male\n",
       "State                                 \n",
       "Alabama     10753.325000  10765.850000\n",
       "Alaska        679.975000    860.357143\n",
       "Arizona      8998.386364  10036.204545\n",
       "Arkansas     6621.615385   6301.690476\n",
       "California  48312.840909  49555.522727"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now it's time to pivot!\n",
    "pivot = grouped.pivot(index='State', columns='Gender',values='Deaths_mean')\n",
    "pivot.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! We've just created a pivot table.  \n",
    "\n",
    "Let's reset the index and see how it changes our pivot table. \n",
    "\n",
    "In the cell below, reset the index of the `pivot` object as we did previously.  Then, display the head of the object to see if we can detect any changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Again, notice the subtle difference of reseting the index:\n",
    "pivot = pivot.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>State</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10765.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>679.975000</td>\n",
       "      <td>860.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>8998.386364</td>\n",
       "      <td>10036.204545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>6621.615385</td>\n",
       "      <td>6301.690476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>48312.840909</td>\n",
       "      <td>49555.522727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender       State        Female          Male\n",
       "0          Alabama  10753.325000  10765.850000\n",
       "1           Alaska    679.975000    860.357143\n",
       "2          Arizona   8998.386364  10036.204545\n",
       "3         Arkansas   6621.615385   6301.690476\n",
       "4       California  48312.840909  49555.522727"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualizing Data With Pivot Tables\n",
    "\n",
    "Now, we'll make use of our newly created pivot table to quickly create some visualizations of our data.  \n",
    "\n",
    "In the cell below, call `pivot.plot()` with the following parameters:\n",
    "\n",
    "* kind = `'barh'`\n",
    "* figsize = `(15,8)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c2e9898>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now let's make a sweet bar chart!!\n",
    "pivot.plot(kind='barh', figsize=(15,8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice the Y-axis is currently just a list of numbers.  That's because when we reset the index, it defaulted to assigning integers as the index for the DataFrame.  Let's set the index back to `'State'`, and then recreate the visualization. \n",
    "\n",
    "In the cell below:\n",
    "\n",
    "* Use the `pivot` object's `set_index()` method and set the index to `'State'`.  Then, chain this with a `.plot()` call to recreate the visualization using the code we used in the cell above.  \n",
    "\n",
    "All the code in this cell should be done in a single line.  Just call the methods--do not rebind `pivot` to be equal to this line of code. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c488c50>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Where's the states?! Notice the y-axis is just a list of numbers.\n",
    "#This is populated by the DataFrame's index.\n",
    "#When we used the .reset_index() method, we created a new numbered index to name each row. \n",
    "#Let's fix that by making state the index again.\n",
    "pivot.set_index('State').plot(kind='barh', figsize=(15,8)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, that we've created a visualization with the states as the y-axis, let's print out the head of the `pivot` object again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>State</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>10753.325</td>\n",
       "      <td>10765.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>679.975</td>\n",
       "      <td>860.357143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender    State     Female          Male\n",
       "0       Alabama  10753.325  10765.850000\n",
       "1        Alaska    679.975    860.357143"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Also notice that if we call the DataFrame pivot again, state is not it's index.\n",
    "#The above method returned a DataFrame with State as index and we plotted it,\n",
    "#but it did not update the DataFrame itself.\n",
    "pivot.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the index has not changed.  That's because the code we wrote when we set the index to the 'State' column returns a copy of the DataFrame object with the index set to 'State'--by default, it does not mutate original `pivot` object.  \n",
    "\n",
    "If we want to do that, we'll need to capture the new object returned by updating the contents of the `pivot` variable.  \n",
    "\n",
    "In the cell below, set the index of `pivot` to `'State'`.  Then, recreate the bar plot using this new object.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c831a90>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#If we wanted to more permanently change the index we would set it first and then plot:\n",
    "pivot = pivot.set_index('State')\n",
    "pivot.plot(kind='barh', figsize=(15,8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, let's check the head of the DataFrame to confirm that the index structure has changed.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Alabama</th>\n",
       "      <td>10753.325</td>\n",
       "      <td>10765.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>679.975</td>\n",
       "      <td>860.357143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender      Female          Male\n",
       "State                           \n",
       "Alabama  10753.325  10765.850000\n",
       "Alaska     679.975    860.357143"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's stack these bar charts to see how that looks. \n",
    "\n",
    "In the cell below, recreate the visualization we did in the cell above, but this time, also pass in `stacked=True` as a parameter. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11cbb94e0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lastly, let's stack each of these bars for each state.\n",
    "#Notice we don't have to worry about index here, because we've already set it above.\n",
    "pivot.plot(kind='barh', figsize=(15,8), stacked=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacking and Unstacking DataFrames\n",
    "\n",
    "Now, let's get some practice stacking and unstacking DataFrames. \n",
    "\n",
    "### Stacking\n",
    "\n",
    "In the cell below, let's display the head of `grouped` to remind ourselves of the format we left it in. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Deaths_mean</th>\n",
       "      <th>Deaths_min</th>\n",
       "      <th>Deaths_max</th>\n",
       "      <th>Deaths_std</th>\n",
       "      <th>Population_mean</th>\n",
       "      <th>Population_min</th>\n",
       "      <th>Population_max</th>\n",
       "      <th>Population_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Female</td>\n",
       "      <td>10753.325000</td>\n",
       "      <td>10</td>\n",
       "      <td>116297</td>\n",
       "      <td>24612.250487</td>\n",
       "      <td>1.078713e+06</td>\n",
       "      <td>2087</td>\n",
       "      <td>4334752</td>\n",
       "      <td>1.400309e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Male</td>\n",
       "      <td>10765.850000</td>\n",
       "      <td>10</td>\n",
       "      <td>88930</td>\n",
       "      <td>20813.538537</td>\n",
       "      <td>1.014946e+06</td>\n",
       "      <td>1129</td>\n",
       "      <td>4284775</td>\n",
       "      <td>1.397830e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Female</td>\n",
       "      <td>679.975000</td>\n",
       "      <td>13</td>\n",
       "      <td>4727</td>\n",
       "      <td>1154.870455</td>\n",
       "      <td>1.440403e+05</td>\n",
       "      <td>1224</td>\n",
       "      <td>682855</td>\n",
       "      <td>2.015793e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Male</td>\n",
       "      <td>860.357143</td>\n",
       "      <td>12</td>\n",
       "      <td>5185</td>\n",
       "      <td>1411.777392</td>\n",
       "      <td>1.518884e+05</td>\n",
       "      <td>578</td>\n",
       "      <td>770502</td>\n",
       "      <td>2.238843e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Female</td>\n",
       "      <td>8998.386364</td>\n",
       "      <td>21</td>\n",
       "      <td>133923</td>\n",
       "      <td>26245.941003</td>\n",
       "      <td>1.246502e+06</td>\n",
       "      <td>12211</td>\n",
       "      <td>6265346</td>\n",
       "      <td>2.096632e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State  Gender   Deaths_mean  Deaths_min  Deaths_max    Deaths_std  \\\n",
       "0  Alabama  Female  10753.325000          10      116297  24612.250487   \n",
       "1  Alabama    Male  10765.850000          10       88930  20813.538537   \n",
       "2   Alaska  Female    679.975000          13        4727   1154.870455   \n",
       "3   Alaska    Male    860.357143          12        5185   1411.777392   \n",
       "4  Arizona  Female   8998.386364          21      133923  26245.941003   \n",
       "\n",
       "   Population_mean  Population_min  Population_max  Population_std  \n",
       "0     1.078713e+06            2087         4334752    1.400309e+06  \n",
       "1     1.014946e+06            1129         4284775    1.397830e+06  \n",
       "2     1.440403e+05            1224          682855    2.015793e+05  \n",
       "3     1.518884e+05             578          770502    2.238843e+05  \n",
       "4     1.246502e+06           12211         6265346    2.096632e+06  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see above, `grouped` is currently in a flattened format, with no hierarchical structure to it's indices.  \n",
    "\n",
    "In the cell below, call the `grouped` DataFrame's `.stack()` method. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    State                  Alabama\n",
       "     Gender                  Female\n",
       "     Deaths_mean            10753.3\n",
       "     Deaths_min                  10\n",
       "     Deaths_max              116297\n",
       "     Deaths_std             24612.3\n",
       "     Population_mean    1.07871e+06\n",
       "     Population_min            2087\n",
       "     Population_max         4334752\n",
       "     Population_std     1.40031e+06\n",
       "1    State                  Alabama\n",
       "     Gender                    Male\n",
       "     Deaths_mean            10765.9\n",
       "     Deaths_min                  10\n",
       "     Deaths_max               88930\n",
       "     Deaths_std             20813.5\n",
       "     Population_mean    1.01495e+06\n",
       "     Population_min            1129\n",
       "     Population_max         4284775\n",
       "     Population_std     1.39783e+06\n",
       "2    State                   Alaska\n",
       "     Gender                  Female\n",
       "     Deaths_mean            679.975\n",
       "     Deaths_min                  13\n",
       "     Deaths_max                4727\n",
       "     Deaths_std             1154.87\n",
       "     Population_mean         144040\n",
       "     Population_min            1224\n",
       "     Population_max          682855\n",
       "     Population_std          201579\n",
       "                           ...     \n",
       "99   State                Wisconsin\n",
       "     Gender                    Male\n",
       "     Deaths_mean            9573.45\n",
       "     Deaths_min                  13\n",
       "     Deaths_max              113692\n",
       "     Deaths_std             25681.4\n",
       "     Population_mean    1.13532e+06\n",
       "     Population_min            1286\n",
       "     Population_max         6860107\n",
       "     Population_std     2.08907e+06\n",
       "100  State                  Wyoming\n",
       "     Gender                  Female\n",
       "     Deaths_mean            1161.03\n",
       "     Deaths_min                  10\n",
       "     Deaths_max               13140\n",
       "     Deaths_std             2937.94\n",
       "     Population_mean         146757\n",
       "     Population_min             336\n",
       "     Population_max          672620\n",
       "     Population_std          235238\n",
       "101  State                  Wyoming\n",
       "     Gender                    Male\n",
       "     Deaths_mean            1149.51\n",
       "     Deaths_min                  10\n",
       "     Deaths_max               10113\n",
       "     Deaths_std             2569.28\n",
       "     Population_mean         139224\n",
       "     Population_min             244\n",
       "     Population_max          694760\n",
       "     Population_std          241360\n",
       "Length: 1020, dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped.stack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the `stack()` method has stacked our DataFrame from a flattened format into one with a multi-hierarchical index! This is an easy, quick way to aggregate our data.\n",
    "\n",
    "### Unstacking \n",
    "\n",
    "Now, we'll explore unstacking with the `pivot` DataFrame, which is already stacked into a pivot table. \n",
    "\n",
    "In the cell below, set unstack `pivot` using the object's `.unstack()` method. Then, display the object to see how it has changed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender  State               \n",
       "Female  Alabama                 10753.325000\n",
       "        Alaska                    679.975000\n",
       "        Arizona                  8998.386364\n",
       "        Arkansas                 6621.615385\n",
       "        California              48312.840909\n",
       "        Colorado                 6460.162791\n",
       "        Connecticut              7144.641026\n",
       "        Delaware                 2000.029412\n",
       "        District of Columbia     1497.580645\n",
       "        Florida                 36019.071429\n",
       "        Georgia                 15372.317073\n",
       "        Hawaii                   2182.944444\n",
       "        Idaho                    2874.323529\n",
       "        Illinois                23432.926829\n",
       "        Indiana                 13425.717949\n",
       "        Iowa                     6419.707317\n",
       "        Kansas                   5492.309524\n",
       "        Kentucky                10426.083333\n",
       "        Louisiana                9076.585366\n",
       "        Maine                    3471.823529\n",
       "        Maryland                 9894.780488\n",
       "        Massachusetts           13356.846154\n",
       "        Michigan                18421.659091\n",
       "        Minnesota                8168.204545\n",
       "        Mississippi              6342.634146\n",
       "        Missouri                12493.170732\n",
       "        Montana                  2341.393939\n",
       "        Nebraska                 3667.794872\n",
       "        Nevada                   3729.166667\n",
       "        New Hampshire            3293.344828\n",
       "                                    ...     \n",
       "Male    Massachusetts           11368.341463\n",
       "        Michigan                17940.431818\n",
       "        Minnesota                7792.795455\n",
       "        Mississippi              6487.317073\n",
       "        Missouri                11810.119048\n",
       "        Montana                  2081.102564\n",
       "        Nebraska                 3290.682927\n",
       "        Nevada                   4489.261905\n",
       "        New Hampshire            2800.303030\n",
       "        New Jersey              15085.317073\n",
       "        New Mexico               3549.428571\n",
       "        New York                29864.477273\n",
       "        North Carolina          15750.409091\n",
       "        North Dakota             1587.411765\n",
       "        Ohio                    23551.951220\n",
       "        Oklahoma                 7468.909091\n",
       "        Oregon                   6528.977273\n",
       "        Pennsylvania            27187.463415\n",
       "        Rhode Island             2239.243243\n",
       "        South Carolina           9078.292683\n",
       "        South Dakota             1800.500000\n",
       "        Tennessee               13333.050000\n",
       "        Texas                   34347.636364\n",
       "        Utah                     3081.511628\n",
       "        Vermont                  1785.846154\n",
       "        Virginia                12585.833333\n",
       "        Washington               9877.431818\n",
       "        West Virginia            6211.612903\n",
       "        Wisconsin                9573.454545\n",
       "        Wyoming                  1149.514286\n",
       "Length: 102, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot = pivot.unstack()\n",
    "pivot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that it has unstacked the multi-hierarchical structure of the `pivot` DataFrame by one level. Let's call it one more time and display the results!\n",
    "\n",
    "In the cell below, set pivot equal to `pivot.unstack()` again, and then display the `pivot` object to see how things have changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Alaska</th>\n",
       "      <th>Arizona</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>District of Columbia</th>\n",
       "      <th>Florida</th>\n",
       "      <th>...</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>Washington</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>10753.325</td>\n",
       "      <td>679.975000</td>\n",
       "      <td>8998.386364</td>\n",
       "      <td>6621.615385</td>\n",
       "      <td>48312.840909</td>\n",
       "      <td>6460.162791</td>\n",
       "      <td>7144.641026</td>\n",
       "      <td>2000.029412</td>\n",
       "      <td>1497.580645</td>\n",
       "      <td>36019.071429</td>\n",
       "      <td>...</td>\n",
       "      <td>1932.757576</td>\n",
       "      <td>13334.325</td>\n",
       "      <td>33897.953488</td>\n",
       "      <td>3046.547619</td>\n",
       "      <td>2124.695652</td>\n",
       "      <td>13232.146341</td>\n",
       "      <td>9796.863636</td>\n",
       "      <td>6247.225806</td>\n",
       "      <td>9918.113636</td>\n",
       "      <td>1161.031250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>10765.850</td>\n",
       "      <td>860.357143</td>\n",
       "      <td>10036.204545</td>\n",
       "      <td>6301.690476</td>\n",
       "      <td>49555.522727</td>\n",
       "      <td>6442.500000</td>\n",
       "      <td>6315.300000</td>\n",
       "      <td>1940.914286</td>\n",
       "      <td>1534.806452</td>\n",
       "      <td>36771.340909</td>\n",
       "      <td>...</td>\n",
       "      <td>1800.500000</td>\n",
       "      <td>13333.050</td>\n",
       "      <td>34347.636364</td>\n",
       "      <td>3081.511628</td>\n",
       "      <td>1785.846154</td>\n",
       "      <td>12585.833333</td>\n",
       "      <td>9877.431818</td>\n",
       "      <td>6211.612903</td>\n",
       "      <td>9573.454545</td>\n",
       "      <td>1149.514286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama      Alaska       Arizona     Arkansas    California  \\\n",
       "Gender                                                                   \n",
       "Female  10753.325  679.975000   8998.386364  6621.615385  48312.840909   \n",
       "Male    10765.850  860.357143  10036.204545  6301.690476  49555.522727   \n",
       "\n",
       "State      Colorado  Connecticut     Delaware  District of Columbia  \\\n",
       "Gender                                                                \n",
       "Female  6460.162791  7144.641026  2000.029412           1497.580645   \n",
       "Male    6442.500000  6315.300000  1940.914286           1534.806452   \n",
       "\n",
       "State        Florida     ...       South Dakota  Tennessee         Texas  \\\n",
       "Gender                   ...                                               \n",
       "Female  36019.071429     ...        1932.757576  13334.325  33897.953488   \n",
       "Male    36771.340909     ...        1800.500000  13333.050  34347.636364   \n",
       "\n",
       "State          Utah      Vermont      Virginia   Washington  West Virginia  \\\n",
       "Gender                                                                       \n",
       "Female  3046.547619  2124.695652  13232.146341  9796.863636    6247.225806   \n",
       "Male    3081.511628  1785.846154  12585.833333  9877.431818    6211.612903   \n",
       "\n",
       "State     Wisconsin      Wyoming  \n",
       "Gender                            \n",
       "Female  9918.113636  1161.031250  \n",
       "Male    9573.454545  1149.514286  \n",
       "\n",
       "[2 rows x 51 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot = pivot.unstack()\n",
    "pivot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After calling unstack a second time, we can see that `pivot` has a flattened structure, since it has been completely unstacked!\n",
    "\n",
    "## Summary\n",
    "\n",
    "In this lab, we learned how to:\n",
    "\n",
    "* Use `groupby` to stack and slice data conditionally\n",
    "* Use aggregate functions in combination with groupby statements\n",
    "* Create pivot tables with pandas\n",
    "* Leverage pivot tables and groupby statements to create quick visualizations\n",
    "* `stack` and `unstack` DataFrames "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "learn-env",
   "language": "python",
   "name": "learn-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
=======
>>>>>>> 650dc2464f770d968eaa9d76468dbd7a5c9f671b
